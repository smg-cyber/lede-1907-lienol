#!/bin/bash
#=================================================
# Description: Build OpenWrt using GitHub Actions 
# Lisence: MIT
# 参考以下资料：
# Frome: https://github.com/garypang13/Actions-OpenWrt
# Frome: https://github.com/P3TERX/Actions-OpenWrt
# Frome: https://github.com/Lienol/openwrt-actions
# Frome: https://github.com/svenstaro/upload-release-action
# By ledewrt 2020  
# https://github.com/ledewrt
# https://ledewrt.com
#=================================================

name:  18.06_X64_Std_From_CTCGFW_Firmware

on: 
  #push:
    # 文件改变才会触发
       #paths:
        #- 'diy-lean/package/lean/default-settings/files/zzz-default-settings'
  # 分支master提交时触发
     # branches:
     #  - master     
 # 仅在有以 'v' 开头的tag push 时才会触发
     #tags:
      # - v* 
 # 定时才会触发
  #schedule:
    #- cron: 0 16 * * 5
# 点击star才会触发    
  watch:
      types: [started]
    
env:
  Repo_Url: https://github.com/project-openwrt/openwrt
  Repo_Branch: openwrt-18.06
  Firmware_Name: LEDE_1806_X64_Std_From_CTCGFW
  Config_Files: config-files
  Config_system: 18.06_X64_Std_From_CTCGFW.config
  DIY_SH: 18.06_X64_Std_From_CTCGFW.sh
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  Free_Up_Disk: true
  SSH_Actions: false
  UPLOAD_IPK_DIR_FOR_ARTIFACT: true 
  Upload_Firmware_Artifact: true  
  Upload_Firmware_Release: true
  TZ: Asia/Shanghai

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
         docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
        
    #- name: Free up disk space
     # if: env.Free_Up_Disk == 'true'
     # env:
      #  DEBIAN_FRONTEND: noninteractive
     # run: |
       # sudo rm -rf /usr/share/dotnet
       # docker rmi `docker images -q`
       # sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
       # sudo -E apt-get -qq autoremove --purge
       # sudo -E apt-get -qq clean
             
    - name: Get current date
      id: date
      run: |   
       echo "::set-env name=date::$(date +'%Y%m%d%H%M')"
       echo "::set-env name=date2::$(date +'%Y%m%d%')"  
       
    - name: Clone source code
      run: git clone --depth 1 $Repo_Url -b $Repo_Branch lede
      
    - name: Update feeds
      run: cd lede && ./scripts/feeds update -a

    - name: Install feeds
      run: cd lede && ./scripts/feeds install -a
      
    - name: Load custom configuration
      run: |
        cd lede
        rm -f .config
        cp ../$Config_system .config
        cp -Rf ../$Config_Files files
        chmod +x ../$DIY_SH
        ../$DIY_SH
   
    - name: Make Defconfig
      run: |
          cd lede
          make defconfig
        
    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_Actions == 'true'

    - name: Download package
      id: package
      run: |
        cd lede
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd lede
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"
        
    - name: Upload IPK directory
      uses: actions/upload-artifact@master
      if: env.UPLOAD_IPK_DIR_FOR_ARTIFACT == 'true'
      with:
        name: LedeWrt18.06 x86 IPK
        path: ./bin/packages/

    - name: Organize files and zip
      id: organize
      run: |
        rm -rf ./firmware/
        mkdir -p ./firmware/ 
        find lede/bin/targets/*/*  -name "*sysupgrade*bin*" | xargs -i mv -f {} ./firmware/
        find lede/bin/targets/*/*  -name "*combined*img*" | xargs -i mv -f {} ./firmware/
        find lede/bin/targets/*/*  -name "*uefi-gpt-squashfs*img*" | xargs -i mv -f {} ./firmware/
        find lede/bin/targets/*/*  -name "*combined-squashfs.vmdk*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*acme*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*adbyby*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*airplay2*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*aliddns*" | xargs -i mv -f {} ./firmware/ 
        find lede/bin/packages/*/*  -name "*amule**" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*aria2" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*baidupcs-web*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*chinadns*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*cifs*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*cjdns*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*cpulimit*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*diskman*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*ddns*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*docker*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*frpc*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*frps*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*flowoffload*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*haproxy-tcp*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*hd-idle*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*ipsec-vpnd*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*ipsec-vpnserver-manyusers*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*iptvhelper*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*kcptun*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*kodexplorer*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*minidlna*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*forked-daapd*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*music-remote-center*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*mwan3*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*netdata*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*nps*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*openclash*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*openvpn*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*passwall*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*pppoe*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*qbittorrent*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*rclone*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*serverchan*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*sqm*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*softethervpn*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*ssr-plus*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*syncdial*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*transmission*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*trojan-server*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*udpxy*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*unblockmusic*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*v2ray-server*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*vsftpd*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*watchcat*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*wrtbwmon*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*xlnetacc*" | xargs -i mv -f {} ./firmware/
        find lede/bin/packages/*/*  -name "*zerotier*" | xargs -i mv -f {} ./firmware/
        #mv lede/.config  ./firmware/config.txt
        cd firmware
        rename -v "s/^openwrt/${{ env.date2 }}-ledewrt-1806-/" *combined*
        zip -r luci-app-adbyby-plus.zip *adbyby* || true
        zip -r luci-app-php-kodexplorer *kodexplorer* || true
        zip -r luci-app-passwall.zip *passwall* *chinadns* *haproxy* || true
        zip -r luci-app-baidupcs-web.zip *baidupcs* || true
        zip -r luci-app-cifs-mount.zip *cifs-mount* || true
        zip -r luci-app-music-remote-center.zip *music-remote-center* *forked-daapd* || true
        zip -r luci-app-airplay2.zip *airplay2* || true
        zip -r luci-app-openclash.zip *openclash* || true
        zip -r luci-app-softethervpn.zip *softethervpn* || true
        zip -r luci-app-syncdial.zip *syncdial* || true
        zip -r luci-app-usb-printer.zip *usb-printer* || true
        zip -r luci-app-verysync.zip *verysync* || true
        zip -r luci-app-vsftpd.zip *vsftpd* || true
        zip -r luci-app-xlnetacc.zip *xlnetacc* || true
        zip -r luci-app-zerotier.zip *zerotier* || true
        rm -Rf *.ipk
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"
        
    - name: Upload firmware to cowtransfer
      #if: env.UPLOAD_FIRMWARE_TO_COWTRANSFER == 'true'
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        cowurl=$(./transfer cow --block 2621440 -s --no-progress ${FIRMWARE})
        cowurl=$(echo $cowurl | grep -o -E "https[^ ]*")
        echo "::set-env name=COWURL::$cowurl"
        echo "Download Link: $cowurl 🚀"
 
    - name: Upload firmware to WeTransfer
     # if: env.UPLOAD_FIRMWARE_TO_WETRANSFER == 'true'
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        wetrans=$(./transfer wet -s -p 16 --no-progress ${FIRMWARE})
        wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
        echo "::set-env name=WETRANS::$wetrans"
        echo "Download Link: $wetrans 🚀"
        
    - name: Create release
      id: create_release
      uses: actions/create-release@master
      continue-on-error: true
      if: env.REPO_TOKEN && env.Upload_Firmware_Release == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ env.date }}_${{ env.Firmware_Name }}
        release_name: ${{ env.date }} ${{ env.Firmware_Name }}
        body: |
            墙内加速下载🔥:
            
            奶牛快传: ${{ env.COWURL }} 🚀
            
            WeTransfer: ${{ env.WETRANS }} 🗽
            
            请分配不低于500M 的内存和存储空间 💾
        draft: false
        prerelease: false
       
    #- name: Upload firmware for release
    #  uses: csexton/release-asset-action@master
     # continue-on-error: true
     # if: env.REPO_TOKEN && env.Upload_Firmware_Release == 'true'
     #  with:
      #  pattern: "${{ env.FIRMWARE }}/*"
     #   github-token: ${{ secrets.REPO_TOKEN }}
      #  release-url: ${{ steps.create_release.outputs.upload_url }}
  
    - name: Upload firmware to artifact
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && env.Upload_Firmware_Artifact == 'true'
      with:
        name: ${{ env.date }}_${{ env.Firmware_Name }}
        path: ${{ env.FIRMWARE }}
         
