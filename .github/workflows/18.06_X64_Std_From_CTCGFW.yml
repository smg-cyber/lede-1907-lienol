#!/bin/bash
#=================================================
# Description: Build OpenWrt using GitHub Actions 
# Lisence: MIT
# 参考以下资料：
# Frome: https://github.com/garypang13/Actions-OpenWrt
# Frome: https://github.com/P3TERX/Actions-OpenWrt
# Frome: https://github.com/Lienol/openwrt-actions
# Frome: https://github.com/svenstaro/upload-release-action
# By ledewrt 2020  
# https://github.com/ledewrt
# https://ledewrt.com
#=================================================

name:  18.06_X64_Std_From_CTCGFW_Firmware

on: 
  push:
    # 文件改变才会触发
       paths:
        - 'diy-lean/package/lean/default-settings/files/zzz-default-settings'
  # 分支master提交时触发
     # branches:
     #  - master     
 # 仅在有以 'v' 开头的tag push 时才会触发
     #tags:
      # - v* 
 # 定时才会触发
  #schedule:
    #- cron: 0 16 * * 5
# 点击star才会触发    
  watch:
      types: [started]
    
env:
  Repo_Url: https://github.com/project-openwrt/openwrt
  Repo_Branch: openwrt-18.06
  Firmware_Name: LEDE_1806_X64_Std_From_CTCGFW
  Config_Files: config-files
  Config_system: 18.06_X64_Std_From_CTCGFW.config
  DIY_SH: 18.06_X64_Std_From_CTCGFW.sh
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  Free_Up_Disk: true
  SSH_Actions: false
  Upload_Firmware_Artifact: true  
  Upload_Firmware_Release: true
  TZ: Asia/Shanghai

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
         docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
        
    #- name: Free up disk space
     # if: env.Free_Up_Disk == 'true'
     # env:
      #  DEBIAN_FRONTEND: noninteractive
     # run: |
       # sudo rm -rf /usr/share/dotnet
       # docker rmi `docker images -q`
       # sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
       # sudo -E apt-get -qq autoremove --purge
       # sudo -E apt-get -qq clean
    - name: Clone source code
      run: git clone --depth 1 $Repo_Url -b $Repo_Branch lede
    - name: Update feeds
      run: cd lede && ./scripts/feeds update -a

    - name: Install feeds
      run: cd lede && ./scripts/feeds install -a
      
    - name: Load custom configuration
      run: |
        cd lede
        rm -f .config
        cp ../$Config_system .config
        cp -Rf ../$Config_Files files
        chmod +x ../$DIY_SH
        ../$DIY_SH
   
    - name: Make Defconfig
      run: |
          cd lede
          make defconfig
          [ $(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/') == generic ] && DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/CONFIG_TARGET_(.*)_DEVICE_.*=y/\1/') || DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
          echo "::set-env name=DEVICE_NAME::$DEVICE_NAME"
        
    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_Actions == 'true'

    - name: Download package
      id: package
      run: |
        cd lede
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd lede
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"
        
    - name: Get current date
      id: date
      run: |   
        echo "::set-env name=date::$(date +'%m/%d_%Y_%H/%M')"
        echo "::set-env name=date2::$(date +'%Y%m%d')"
      
    - name: Organize files and zip
      id: organize
      if: env.Upload_Firmware_Artifact == 'true' && !cancelled()
      run: |
        rm -rf ./firmware/
        mkdir -p ./firmware/ 
        find lede/bin/targets/*/*/*  -name "*sysupgrade*bin*" | xargs -i mv -f {} ./firmware/
        find lede/bin/targets/*/*/*  -name "*combined*img*" | xargs -i mv -f {} ./firmware/
        find lede/bin/targets/*/*/*  -name "*uefi-gpt-squashfs*img*" | xargs -i mv -f {} ./firmware/
        #mv lede/.config  ./firmware/config.txt
        cd firmware
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"
        
    - name: Upload firmware to cowtransfer
      #if: env.UPLOAD_FIRMWARE_TO_COWTRANSFER == 'true'
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        cowurl=$(./transfer cow --block 2621440 -s --no-progress ${FIRMWARE})
        cowurl=$(echo $cowurl | grep -o -E "https[^ ]*")
        echo "::set-env name=COWURL::$cowurl"
        echo "Download Link: $cowurl 🚀"
 
    - name: Upload firmware to WeTransfer
     # if: env.UPLOAD_FIRMWARE_TO_WETRANSFER == 'true'
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        wetrans=$(./transfer wet -s -p 16 --no-progress ${FIRMWARE})
        wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
        echo "::set-env name=WETRANS::$wetrans"
        echo "Download Link: $wetrans 🚀"
        
    - name: Create release
      id: create_release
      uses: actions/create-release@master
      continue-on-error: true
      if: env.REPO_TOKEN && env.Upload_Firmware_Release == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ env.date }}_${{ env.DEVICE_NAME }}_Std
        release_name: ${{ env.date2 }} ${{ env.DEVICE_NAME }} Std
        body: |
            墙内加速下载🔥:
            
            奶牛快传: ${{ env.COWURL }} 🚀
            
            WeTransfer: ${{ env.WETRANS }} 🗽
            
            请分配不低于1G 的内存和存储空间 💾
        draft: false
        prerelease: false     
       
    #- name: Upload firmware to release
     # uses: svenstaro/upload-release-action@v1-release
     # if: steps.compile.outputs.status == 'success' && env.Upload_Firmware_Release == 'true'
     # with:
     #   repo_token: ${{ secrets.REPO_TOKEN }}
     #   file: ${{ env.firmware }}/
     #   tag: ${{steps.date.outputs.date}}
     #   overwrite: true
       # file_glob: true
  
    - name: Upload firmware to artifact
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && env.Upload_Firmware_Artifact == 'true'
      with:
        name: ${{ env.date2 }}_${{ env.Firmware_Name }}
        path: ${{ env.FIRMWARE }}
         
